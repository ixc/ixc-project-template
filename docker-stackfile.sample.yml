# Save as `docker-stackfile.{environment}.yml`. Do not commit secrets.
# Always pin images for linked services on production environments.
django:
  # autoredeploy: true
  deployment_strategy: high_availability
  environment:
    # AWS_SECRET_ACCESS_KEY: # 1Password, shared vault, Amazon, pip-accel
    BASE_SETTINGS_MODULE: {environment}
    # EMAIL_HOST:
    EMAIL_HOST_PASSWORD:
    # EMAIL_HOST_USER:
    # MASTER_PASSWORD:
    # MEDIA_AWS_ACCESS_KEY_ID:
    MEDIA_AWS_SECRET_ACCESS_KEY:
    # MEDIA_AWS_STORAGE_BUCKET_NAME:
    # NEW_RELIC_CONFIG_FILE:
    # PGDATABASE:
    # PGHOST:
    PGPASSWORD:
    # PGPORT:
    # PGUSER:
    # PIP_INDEX_URL: # 1Password, shared vault, devpi.ixcsandbox.com - ic
    PYTHONWARNINGS: ignore
    SENTRY_DSN:
    # SITE_DOMAIN:
    VIRTUAL_HOST: {{ project_name }}.{environment}.ixcsandbox.com
  image: interaction/{{ project_name }}:{environment}
  links:
    - elasticsearch
    # - postgres
    - redis
  ports:
    - "8000"
  restart: on-failure
  sequential_deployment: true  # Avoid parallel execution of `migrate` command
  tags:
    - {environment}
  volumes:
    - /opt/{{ project_name }}/var
elasticsearch:
  image: interaction/elasticsearch-icu:1
  restart: on-failure
  tags:
    - {environment}
# haproxy:
#   environment:
#     HTTP_BASIC_AUTH: {USERNAME}:{PASSWORD}
#   image: dockercloud/haproxy:latest
#   links:
#     - django
#   ports:
#     - "80:80"
#   roles:
#     - global
#   restart: on-failure
#   tags:
#     - {environment}
# postgres:
#   environment:
#     POSTGRES_PASSWORD:
#   image: postgres:9.4
#   restart: on-failure
#   tags:
#     - {environment}
redis:
  command: redis-server --appendonly yes
  image: redis:3-alpine
  restart: on-failure
  tags:
    - {environment}
